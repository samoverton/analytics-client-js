#!/usr/bin/env node

var AA = require('./../index');
var Config = AA.ConnectionConfig;
var Cluster = AA.Cluster;
var GetOpt = require('node-getopt');
var util = require('util');

var getopt = new GetOpt([
    ['','help','display this help page and exit'],
    ['h','host=ARG+',"name of host of jbird instance.\n"+
"                        Multiple arguments are supported.\n"+
"                        Defaults to localhost"],
    ['b','batch-size=ARG','The batch size in bytes'],
    ['u','username=ARG','Username for basic auth'],
    ['p','password=ARG','Password for basic auth']
]);

getopt.setHelp(
    "\n  Usage: insertData FILE TABLE [OPTIONS]\n\n"+
    "  FILE = a file containing a json event per line\n"+
    "  TABLE = the table name in which to insert data\n\n"+
    "  OPTIONS:\n\n"+
    "[[OPTIONS]]\n\n"
).bindHelp();

var opt = getopt.parseSystem();

if(opt.argv.length < 2) {
    getopt.showHelp();
    process.exit(1);
}

var file = opt.argv[0];
var config = new Config;
if(opt.options['batch-size']) {
    config.setOption('INSERT_BATCH_SIZE',parseInt(opt.options['batch-size']));
}
if(opt.options.username && opt.options.password) {
    config.setOptions({
        USERNAME: opt.options.username,
        PASSWORD: opt.options.password
    });
}

var hosts = opt.options['host'] || ['localhost'];

var cluster = new Cluster;
cluster.addURIs.apply(cluster,hosts);

var session = cluster.getSession(config);

var inserter = session.inserter(opt.argv[1]);

console.log("INFO: batch size: %d bytes",inserter.getBatchSize());
var progress = 0;
var outputFormat = "%s %d bytes ... [%s]";
inserter.insert(file).then(function(res){
    process.stdout.write(util.format(outputFormat+" \n",
        "Streaming",
        progress,
        res.statusCode+" "+res.statusText
    ));
    if(res.body) console.log(res.body);
},function(err){
    if(err.statusCode && err.statusText) {
        process.stdout.write(util.format("\nError: %d %s",err.statusCode,err.statusText));
    }
    console.error("\n"+err.message);
    process.exit(1);
},function(update){
    var perc = Math.round(update.progress*100/update.total);
    progress = update.progress;
    process.stdout.write(util.format(outputFormat+"\r",
        perc === 100 ? "Processing" : "Streaming",
        progress,
        perc === 100 ? "Pending" : perc+"%"
    ));
});


